# -*- coding: utf-8 -*-
"""Copy of Copy of GANS_Assignment1.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M12KPrMZtbTSNh0MfGreLVmTEqETanua

Instructions for the assignment


*   Fill the codeblocks according to the comments given
*   Hints are given wherever required
*   Please note that copying will not be tolerated, and appropriate action will be taken if we suspect any misconduct.
*   You're welcome to utilize any online resources in case you feel stuck anywhere :-)

# Section A *(2 Marks each)*

## NumPy (Numerical Python)
**bold text**
### Multidimensional array object
- Array is a grid of homogeneous elements which can be indexed in various ways 
- Different from Python list which can store different data types
- NumPy stores multidimensional arrays as an instance of **ndarray**
"""

import numpy as np

# Python list to initialize a one dimensional NumPy array of numbers 1 to 5 and then print it 
list1 = [1,2,3,4,5]
array1 = np.array(list1)
print(array1)

# Python list to initialize a two dimensional NumPy array of shape [3,3] and then print it 
list2 = [[1,2,3],[4,5,6],[7,8,9]]
array2 = np.array(list2)
print(array2)

# Write a NumPy function to create an array with random values of shape [3,4]
print(np.random.randint(1,10,(3,4)))

# Write a NumPy function to create an array with all elements initialized as zero of shape [3,4]
print(np.zeros((3,4)))

# Write a NumPy function to create an array with all elements initialized as ones of shape [3,4]
print(np.ones(((3,4))))

# Write a NumPy function to create an array containing a range of evenly spaced intervals
# Hint : Use np.arange or np.linspace

# np.arange(1,n,2). for example
np.arange(1,43,2)

"""### Basic array operations
- algebraic operations 
- logical operations
"""

a = np.array([[-4,6,8], [9, 3, 1], [1, 8, 5]])
b = np.array([[11,16,18], [90, 37, 81], [61, 48, 75]])

# Write a NumPy function to add, subtract, multiply and divide arrays 'a' and 'b'
print(np.add(a,b))
print(np.subtract(a,b))
print(np.multiply(a,b))
print(np.divide(a,b))

# Write a NumPy function to get the sum of the array 'a' along axis=0 
print(np.sum(a,axis=0))

# Write a NumPy function to get the sum of the array 'a' along axis=1 
print(np.sum(a,axis=1))

# Write a NumPy function to reverse the array 'a' 
print(np.flip(a))

# Write a NumPy function to reverse the array 'a' along axis=0
print(np.flip(a,axis=0))

# Write a NumPy function to reverse the array 'a' along axis=1
print(np.flip(a,axis=1))

"""### Sorting and concatenation
- sort arrays
- join multiple arrays

"""

a = np.array([[-4,6,8], [9, 3, 1], [1, 8, 5]])
b = np.array([[11,16,18], [90, 37, 81], [61, 48, 75]])

# Write a NumPy function to sort the array 'a' 
print(np.sort(a))

# Write a NumPy function to sort the array 'a' along axis=0
print(np.sort(a,axis=0))

# Write a NumPy function to sort the array 'a' along axis=1
print(np.sort(a,axis=1))

# Write a NumPy function to sort the array 'a' in descending order along axis=0
print(np.flip(np.sort(a,axis=0),axis=0))

# Write a NumPy function to argsort the array along axis=0
print(np.argsort(a,axis=0))

# Write a NumPy function to argsort the array along axis=1
print(np.argsort(a,axis=1))

# Write a NumPy function to concatenate the arrays 'a' and 'b'
print(np.concatenate((a,b), axis=1))

# Write a NumPy function to concatenate the arrays 'a' and 'b' along axis = 0
print(np.concatenate((a,b), axis=0))

# Note: You can do the same function using stacking, discover and try that :)

"""### Reshaping arrays
- the number of dimensions of the array
-  shape of n-dimensional array as a tuple with n elements s.t. $i^{th}$ element is the length of the $i^{th}$ dimension of the array
- total number of elements of the array
- reshapes the array
- flattens multidimensional array into a 1D array
- adds new dimensions to the array
"""

a = np.array([[4,6,8], [9, 3, 1], [1, 8, 5]])

# Write a NumPy function to get the Number of dimensions
print(np.ndim(a))

# Write a NumPy function to get the Shape of the array
print(np.shape(a))

# Write a NumPy function to get the Size of the array
print(np.size(a))

# Write a NumPy function to Reshape the array 'a' to the dimension (1,9)
print(np.reshape(a, (1, 9)))

# Write a NumPy function to add a new axis to the array 'a' 
# Note : Show atleast two different ways of doing this 
print(a[np.newaxis, :])

print(np.expand_dims(a, axis=0))

"""### Indexing and slicing
- NumPy allows indexing array using tuple of nonnegative integers, booleans, array or integers
"""

a = np.array([[4,6,0], [0, 3, 1], [1, 8, 5]])

# Write a NumPy function to index and slice NumPy arrays similar to Python lists
# Show all three - indexing by a integer, indexing by a tuple, using range
def index_n_slice(arr,indices):
  if isinstance(indices, int):
        return arr[indices]
  elif isinstance(indices, tuple):
        return arr[indices]
  elif isinstance(indices, range):
        return arr[indices]
  else: raise ValueError("Invalid index or slice.")

print(index_n_slice(a, 1))
print(index_n_slice(a, (0, 2)))
print(index_n_slice(a, range(1, 3)))

# Write a NumPy function to select values satisfying a specific condition like Values greater than 4 
condition = a > 4
print(a[condition])

# Write a NumPy function to select values satisfying mulitple conditions like Values greater than 4 and divisible by 2
print(a[(a > 4) & (a % 2 == 0)])

"""### Copying arrays
- new array object with a copy of the data
- Changes made in the copy array is not reflected in the original array
"""

a = np.array([[4,6,0], [0, 3, 1], [1, 8, 5]])

# Write a NumPy function to copy the array 'a' and finally print an array where all elements are increased by 1
b = a.copy()
print(b+1)

"""## Pandas ( Python Data Analysis Library)

### Main Features
- Easy handling of missing data in both floating point and non-floating point data.
- Automatic and explicit data alignment, making it easy to perform computations and transformations on data sets.

#### Generating the dataset

Run the following load command to get the 2-Dim iris dataset. Do the following operations on it and please dont edit this cell
"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

"""#### Basic Data Analysis"""

import pandas as pd
# Write a Pandas function to drop rows that contain a missing value. 
DF = pd.DataFrame(iris_2d)
DF.dropna()

# Write a Pandas function to find the correlation between the first two columns.
print(DF[0].corr(DF[1]))

# Write a Pandas function to find the mean, median and standard deviation of column 3.
print('',DF[3].mean(),'\n',DF[3].median(),'\n',DF[3].std())

# Write a Pandas function to create a new column for volume in iris_2d, where volume is (pi x petallength x sepal_length^2)/3
# Hints: 
# 1. Introduce new dimension to match iris_2d's
# 2. Add the new column
DF['New Column'] = [DF[2][i]*3.14*DF[0][i]*DF[0][i]/3 for i in range(len(DF.index))]
DF

"""# Section B *(2 Marks each)*

###NumPy

Q1 Let x = np.arange(4, dtype=np.int64). Create an array of ones with the same shape and type as X.
"""

print(np.ones(4,dtype=np.int64))

"""Q2 Let x be an array [1, 2, 3, ..., 9]. Split x into 3 arrays, each of which has 4, 2, and 3 elements in the original order."""

x = np.array([1,2,3,4,5,6,7,8,9])
y1, y2, y3 = np.split(x,[4,6])
print(y1)
print(y2)
print(y3)

"""Q3 Initiate x as a 2x5 array with random values from 0 to 10(not inclusive).Get the maximum and minimum values and their indices of x along the second axis."""

x = np.random.uniform(0,10,size=(2,5))
max_values = np.amax(x, axis=1)
min_values = np.amin(x, axis=1)
max_indices = np.argmax(x, axis=1)
min_indices = np.argmin(x, axis=1)
print(max_values)
print(min_values)
print(max_indices)
print(min_indices)

"""### Pandas

Run the following load command and solve the following questions
"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')





"""Q4 Write a Pandas function to find the count of unique species."""

DF = pd.DataFrame(iris)
DF1 = DF.drop_duplicates(keep='first')
len(DF.index)-len(DF1.index)

"""# Q5 Write a Pandas function to bin the petal length (3rd) column of iris_2d to form a text array, such that if petal length is:
- Less than 3 –> ‘small’
- 3-5 –> ‘medium’
- greater than equal to 5 –> ‘large’
"""

def sort(I):
  if I<3: return 'small'
  elif I>5: return 'large'
  else: return 'medium'
[sort(eval(DF[2][i])) for i in range(len(DF.index))]

"""Q6 Write a Pandas function to find the most frequent value of petal length (3rd column) in iris dataset"""

eval(DF[2].mode()[0])